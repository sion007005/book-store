<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sion.bookstore.domain.book.repository.BookRepository">
    <sql id="bookColumns">
        title, content, isbn10, isbn13, published_at, publisher, price, sale_price, thumbnail, status, created_at, created_by, modified_at, modified_by, deleted
    </sql>

    <resultMap id="book" type="sion.bookstore.domain.book.repository.Book">
        <result column="id" property="id" />
        <result column="title" property="title" />
        <result column="content" property="content" />
        <result column="isbn10" property="isbn10" />
        <result column="isbn13" property="isbn13" />
        <result column="published_at" property="publishedAt" />
        <result column="publisher" property="publisher" />
        <result column="price" property="price" />
        <result column="sale_price" property="salePrice" />
        <result column="thumbnail" property="thumbnail" />
        <result column="status" property="status" />
        <result column="created_at" property="createdAt" />
        <result column="created_by" property="createdBy" />
        <result column="modified_at" property="modifiedAt" />
        <result column="modified_by" property="modifiedBy" />
        <result column="deleted" property="deleted" />
        <collection property="authors" column = "id"  select="getAuthorList" javaType="java.util.List" ofType="sion.bookstore.domain.book.repository.Author"></collection>
        <collection property="translators" column = "id"  select="getTranslatorList" javaType="java.util.List" ofType="sion.bookstore.domain.book.repository.Translator"></collection>
    </resultMap>

    <select id="getAuthorList" resultType="sion.bookstore.domain.book.repository.Author">
        SELECT name FROM author WHERE book_id = #{id}
    </select>

    <select id="getTranslatorList" resultType="sion.bookstore.domain.book.repository.Translator">
        SELECT name FROM translator WHERE book_id = #{id}
    </select>

    <insert id="create" useGeneratedKeys="true" keyProperty="id" parameterType="sion.bookstore.domain.book.repository.Book">
        INSERT into book (<include refid="bookColumns" />)
        values (#{title}, #{content}, #{isbn10}, #{isbn13}, #{publishedAt}, #{publisher}, #{price}, #{salePrice}, #{thumbnail}, #{status}, #{createdAt}, #{createdBy}, #{modifiedAt}, #{modifiedBy}, #{deleted})
    </insert>

    <select id="findOneById" resultType="sion.bookstore.domain.book.repository.Book">
        SELECT id, <include refid="bookColumns" />
        FROM book WHERE id = #{id};
    </select>

    <update id="update" useGeneratedKeys="true" keyProperty="id" parameterType="sion.bookstore.domain.book.repository.Book">
        UPDATE book set
            title = #{title},
            content = #{content},
            isbn10 = #{isbn10},
            isbn13 = #{isbn13},
            published_at = #{publishedAt},
            publisher = #{publisher},
            price = #{price},
            sale_price = #{salePrice},
            thumbnail = #{thumbnail},
            status = #{status},
            created_at = #{createdAt},
            created_by = #{createdBy},
            modified_at = #{modifiedAt},
            modified_by = #{modifiedBy},
            deleted = #{deleted}
        WHERE id = #{id};
    </update>

    <select id="findAll"
            parameterType="sion.bookstore.domain.book.service.BookSearchCondition"
            resultMap = "book">
            <!-- TODO * 없애기[DONE], join 표준 쿼리로 쓰기[DONE], where절에 속한 것들은 다 indexing 할 것![DONE] -->
            <!-- TODO[DONE] 버그 지금 상태면 공동저자가 있는 책을 검색하면 두 개의 로우가 나옴-->
            SELECT b.id, b.title, b.content, b.isbn10, b.isbn13, b.published_at, b.publisher, b.price, b.sale_price, b.thumbnail, b.status, b.created_at, b.created_by, b.modified_at, b.modified_by, b.deleted
            FROM book b
            INNER JOIN author a ON b.id = a.book_id
            INNER JOIN book_category bc ON bc.book_id = b.id
		    LEFT OUTER JOIN translator t ON b.id = t.book_id
		    WHERE 1=1

            <if test="categoryId != null and categoryId != ''">
                AND bc.category_id = #{categoryId}
            </if>
            <if test="title != null and title != ''">
                AND b.title LIKE CONCAT(#{title}, '%')
            </if>
            <if test="name != null and name != ''">
                AND (a.name LIKE CONCAT(#{name}, '%') or t.name LIKE CONCAT(#{name}, '%'))
            </if>
            <if test="isbn != null and isbn != ''">
                AND (b.isbn10 = #{isbn} or b.isbn13 = #{isbn})
            </if>

            GROUP BY b.id

            <choose>
                <when test="orderType == 'title'">
                ORDER BY b.title
                </when>
                <when test="orderType == 'year'">
                ORDER BY b.published_at desc
                </when>
                <when test="orderType == 'price'">
                ORDER BY b.sale_price asc
                </when>
                <otherwise>
                ORDER BY b.id asc
                </otherwise>
            </choose>

        limit #{searchStartIndex}, #{size}
    </select>

    <select id="countAll"
            parameterType="sion.bookstore.domain.book.service.BookSearchCondition"
            resultType="long">
            SELECT count(*)
            FROM(SELECT b.id
            FROM book b
            INNER JOIN author a ON b.id = a.book_id
            INNER JOIN book_category bc ON bc.book_id = b.id
            LEFT OUTER JOIN translator t ON b.id = t.book_id
            WHERE 1=1

            <if test="categoryId != null and categoryId != ''">
                AND bc.category_id = #{categoryId}
            </if>
            <if test="title != null and title != ''">
                AND b.title LIKE CONCAT(#{title}, '%')
            </if>
            <if test="name != null and name != ''">
                AND (a.name LIKE CONCAT(#{name}, '%') or t.name LIKE CONCAT(#{name}, '%'))
            </if>
            <if test="isbn != null and isbn != ''">
                AND (b.isbn10 = #{isbn} or b.isbn13 = #{isbn})
            </if>

            GROUP BY b.id) count
    </select>

</mapper>